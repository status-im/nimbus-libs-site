(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{366:function(t,s,e){"use strict";e.r(s);var a=e(44),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"chronicles"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chronicles"}},[t._v("#")]),t._v(" Chronicles")]),t._v(" "),e("p",[t._v("Chronicles is a library for structured logging. It adheres to the philosophy\nthat log files shouldn't be based on formatted text strings, but rather on\nwell-defined event records with arbitrary properties that are easy to read\nfor both humans and machines. Let's illustrate this with an example:")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" chronicles"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" chronos"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("apps"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("http"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("httpclient\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("retrievePage"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uri"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Future"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("seq"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("byte"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{.")]),t._v("async"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  debug "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Fetching page"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" uri\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" httpSession "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" HttpSessionRef"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" resp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" await httpSession"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseUri")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uri"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    resp"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("data\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Close the session")]),t._v("\n    await "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("noCancel")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("httpSession"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("closeWait")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" page "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" waitFor "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("retrievePage")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://raw.githubusercontent.com/status-im/nim-chronos/master/README.md"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ninfo "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Retrieved page"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bytes "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" page"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("len\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br")])]),e("p",[t._v("Here, "),e("code",[t._v("debug")]),t._v(" and "),e("code",[t._v("info")]),t._v(" are logging statements, corresponding to different\nseverity levels. You can think of their first argument as the name of a\nparticular event that happened during the execution of the program, while\nthe rest of the arguments are the properties of this event.")]),t._v(" "),e("p",[t._v("From these logging statements, Chronicles can be configured to produce log\noutput in various structured formats. The default format is called "),e("code",[t._v("textlines")]),t._v("\nand it looks like this:")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://github.com/status-im/nim-chronicles/raw/master/media/textlines.png?sanitize=true",alt:"textblocks format example"}})]),t._v(" "),e("p",[t._v("This format is compatible with tooling written for\n"),e("a",{attrs:{href:"https://brandur.org/logfmt#human",target:"_blank",rel:"noopener noreferrer"}},[t._v("heroku/logfmt"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("Alternatively, you can use a multi-line format called "),e("code",[t._v("textblocks")]),t._v(":")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://github.com/status-im/nim-chronicles/raw/master/media/textblocks.png?sanitize=true",alt:"textblocks format example"}})]),t._v(" "),e("p",[t._v("While these human-readable formats provide a more traditional and familiar\nexperience of using a logging library, the true power of Chronicles is\nunlocked only after switching to the "),e("code",[t._v("JSON")]),t._v(" format. Then, the same log output\nwill look like this:")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://github.com/status-im/nim-chronicles/raw/master/media/json.png?sanitize=true",alt:"json format example"}})]),t._v(" "),e("p",[t._v("The main advantage of using JSON logging is that this facilitates the storage\nof the log records in specialized databases which are usually able to provide\nsearch and filtering capabilities and allow you to compute various aggregated\nmetrics and time-series data from the accumulated logs.")]),t._v(" "),e("p",[t._v("Typical log storage choices for the above are open-source search engines such\nas "),e("a",{attrs:{href:"https://www.elastic.co/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ElasticSearch"),e("OutboundLink")],1),t._v(" or specialized providers such as "),e("a",{attrs:{href:"https://www.loggly.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Loggly"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"logging-scopes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#logging-scopes"}},[t._v("#")]),t._v(" Logging Scopes")]),t._v(" "),e("p",[t._v("In the introduction, we saw "),e("code",[t._v("debug")]),t._v(" and "),e("code",[t._v("info")]),t._v(" as examples for logging\nstatements. Other similar statements include "),e("code",[t._v("trace")]),t._v(", "),e("code",[t._v("notice")]),t._v(", "),e("code",[t._v("warn")]),t._v(", "),e("code",[t._v("error")]),t._v("\nand "),e("code",[t._v("fatal")]),t._v(". All of these statements accept arbitrary key-value pairs.\nAs a short-cut, you are also allowed to specify only the name of a particular\nvariable and Chronicles will create a key with the same name (i.e. passing\na local variable named "),e("code",[t._v("foo")]),t._v(" will be translated to the pair "),e("code",[t._v("foo = foo")]),t._v(").")]),t._v(" "),e("p",[t._v("A common practice enforced in other logging libraries is to associate\nthe logging records with the name of the component that produced them\nor with a particular run-time property such as "),e("code",[t._v("RequestID")]),t._v(". Chronicles\nprovides several general-purpose facilities for assigning such properties\nin an automated way:")]),t._v(" "),e("h3",{attrs:{id:"logscope"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#logscope"}},[t._v("#")]),t._v(" "),e("code",[t._v("logScope")])]),t._v(" "),e("p",[e("code",[t._v("logScope")]),t._v(" can be used to introduce additional properties that will be\nautomatically attached to all logging statements in the current lexical\nscope:")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[t._v("logScope"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Lexical properties are typically assigned to a constant:")]),t._v("\n  topics "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rendering opengl"')]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# But you can also assign an expression that will be")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# evaluated on every log statement:")]),t._v("\n  memoryUsage "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentMemUsage")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("renderFrame")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("..")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".)")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  inc frameCounter\n\n  logScope"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# You can add additional properties in any scope. Only logging")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# statements that are in the same lexical scope will be affected:")]),t._v("\n    frame "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" frameCounter\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" t "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("startTimer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  debug "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Frame started"')]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("glFinish")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  debug "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Frame finished"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" totalPrimitives"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" frameTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("elapsed\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br")])]),e("p",[t._v("A "),e("code",[t._v("logScope")]),t._v(" is usually put near the top of a Nim module and used to\nspecify statically assigned properties such as message origin, component\nname, etc. The special "),e("code",[t._v("topics")]),t._v(" property demonstrated here is important\nfor the log filtering mechanism, which will be explained in more details\nlater. If present, this property will always appear first in the formatted\nlog output.")]),t._v(" "),e("h3",{attrs:{id:"publiclogscope"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#publiclogscope"}},[t._v("#")]),t._v(" "),e("code",[t._v("publicLogScope")])]),t._v(" "),e("p",[t._v("While a "),e("code",[t._v("logScope")]),t._v(" affects only the current module, a "),e("code",[t._v("publicLogScope")]),t._v("\nallows you to specify a set of custom properties that may affect your\nentire program. For example, if you have an application running in a\nserver cluster, you may want to assign a property such as "),e("code",[t._v("serverId")]),t._v("\nto every record. To achieve this, create a proxy logging module\nimporting "),e("code",[t._v("chronicles")]),t._v(" and setting up a "),e("code",[t._v("publicLogScope")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# logging.nim")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" chronicles\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getServerId"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\npublicLogScope"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  serverId "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getServerId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[t._v("Every other module importing the proxy module will be able to use the\nentire Chronicles API and will be affected by the public scope.\nIn fact, you should not import "),e("code",[t._v("chronicles")]),t._v(" from such modules, because\nthis will lead to ambiguous symbols such as "),e("code",[t._v("activeChroniclesScope")]),t._v(" and\n"),e("code",[t._v("activeChroniclesStream")]),t._v(".")]),t._v(" "),e("p",[t._v("Using Nim's "),e("code",[t._v("--import:")]),t._v(" option may be a good way to enforce the use of\nthe proxy module in your entire program.")]),t._v(" "),e("h3",{attrs:{id:"dynamiclogscope"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dynamiclogscope"}},[t._v("#")]),t._v(" "),e("code",[t._v("dynamicLogScope")])]),t._v(" "),e("p",[t._v("A "),e("code",[t._v("dynamicLogScope")]),t._v(" is a construct accepting a block of code that can be\nused to attach properties to all logging statements that will be executed\nanywhere within the tree of calls originating from the said block. The key\ndifference with the lexically bound properties is that this includes\nlogging statements from other modules, which are not within the lexical\nscope of the "),e("code",[t._v("dynamicLogScope")]),t._v(" statement.")]),t._v(" "),e("p",[t._v("If you still find the distinction between lexical and dynamic scopes confusing,\nreading the following explanation may help you:")]),t._v(" "),e("p",[t._v("http://wiki.c2.com/?DynamicScoping")]),t._v(" "),e("p",[t._v("A dynamic scope is usually used to track the reason why a particular\nlibrary function is being called (e.g. you are opening a file as a result\nof a particular network request):")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("onNewRequest")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  inc reqID\n  info "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"request received"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reqID"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" origin "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" req"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("remoteAddress\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("dynamicLogScope")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reqID"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# All logging statements triggered before the current block returns")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# will feature the reqID property. This includes logging statements")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# from other modules.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleRequest")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[t._v("Just like regular log statements, "),e("code",[t._v("dynamicLogScope")]),t._v(" accepts a list of arbitrary\nkey-value pairs. The use of "),e("code",[t._v("reqID")]),t._v(" in the example above is a convenient short\nform for specifying the pair "),e("code",[t._v("reqID = reqID")]),t._v(".")]),t._v(" "),e("p",[t._v("While the properties associated with lexical scopes are lazily evaluated as\npreviously demonstrated, all expressions at the beginning of a dynamic scope\nwill be eagerly evaluated before the block is entered.")]),t._v(" "),e("h2",{attrs:{id:"compile-time-configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#compile-time-configuration"}},[t._v("#")]),t._v(" Compile-Time Configuration")]),t._v(" "),e("p",[t._v("Almost everything about Chronicles can be configured at compile-time, through the\nmechanism of Nim's "),e("code",[t._v("-d:")]),t._v(" flags. For example, you can completely remove all of\nthe code related to logging by simply setting "),e("code",[t._v("chronicles_enabled")]),t._v(" to "),e("code",[t._v("off")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("nim c -d:chronicles_enabled"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("off myprogram.nim\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("The compile-time configuration also determines what options are available at\nruntime. When "),e("a",{attrs:{href:"#chronicles_runtime_filtering"}},[t._v("runtime filtering")]),t._v(" is enabled, the\nsame effect can be achieved at runtime with:")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLogEnabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("false"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("Chronicles comes with a very reasonable default configuration, but let's look\nat some of the other supported options:")]),t._v(" "),e("h3",{attrs:{id:"chronicles-sinks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chronicles-sinks"}},[t._v("#")]),t._v(" chronicles_sinks")]),t._v(" "),e("p",[t._v("Chronicles supports producing log records in multiple formats and writing\nthose to various destinations such as the std streams, the system's syslog\ndaemon, or to one or more log files.")]),t._v(" "),e("p",[t._v("The combination of a log format and one or more associated log destinations\nis called a 'sink'. You can use the "),e("code",[t._v("chronicles_sinks")]),t._v(" option to provide the\nlist of sinks that will be used in your program.")]),t._v(" "),e("p",[t._v("The sinks are specified as a comma-separated list of valid Nim expressions\nthat will be better illustrated by the following examples:")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("json")])]),t._v(" "),e("p",[t._v("Write JSON-records to stdout")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("json[file]")])]),t._v(" "),e("p",[t._v("Write JSON-records to a file in the current directory named after the\napplication itself.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("textblocks[stdout,file(/var/log/myapp.log)]")])]),t._v(" "),e("p",[t._v("Use the 'textblocks' format and send the output both to stdout and\nto a file with an absolute path /var/log/myapp.log. If stdout is a terminal,\ncolors will be used both for stdout and the file!")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("textblocks[stdout],textblocks[nocolors,file(/var/log/myapp.log)]")])]),t._v(" "),e("p",[t._v("Same as above, but always write the file without colors.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("textlines[notimestamps,file(myapp.txt),syslog]")])]),t._v(" "),e("p",[t._v("Use the 'textlines' format, but don't include timestamps and write\nboth to a file named 'myapp.txt' with a relative path to the current\nworking directory and also to syslog.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("textlines[nocolors],json[file(logs/myapp.json,truncate)]")])]),t._v(" "),e("p",[t._v("Send the output both in the 'textlines' format to stdout (but without\nusing colors) and to a JSON file named myapp.json in the relative\ndirectory 'logs'. The "),e("code",[t._v("myapp.json")]),t._v(" file will be truncated on each\nprogram execution.")])])]),t._v(" "),e("p",[t._v("The built-in formats include "),e("code",[t._v("json")]),t._v(", "),e("code",[t._v("textlines")]),t._v(" and "),e("code",[t._v("textblocks")]),t._v(", which\nsupport options for specifying the use of colors and timestamps (for more\ninfo see "),e("code",[t._v("chronicles_colors")]),t._v(" and "),e("code",[t._v("chronicles_timestamps")]),t._v(").")]),t._v(" "),e("p",[t._v("The possible log destinations are "),e("code",[t._v("stdout")]),t._v(", "),e("code",[t._v("stderr")]),t._v(", "),e("code",[t._v("file")]),t._v(", "),e("code",[t._v("syslog")]),t._v(", "),e("code",[t._v("logcat")]),t._v(" and "),e("code",[t._v("dynamic")]),t._v(".")]),t._v(" "),e("p",[t._v("Please note that Chronicles also allows you to implement custom logging\nformats through the use of the "),e("code",[t._v("customLogStream")]),t._v(" facility, or by passing in\na module name that implements "),e("code",[t._v("LogRecord")]),t._v(", as is done in the "),e("code",[t._v("tests/xml_records")]),t._v(" -\nsee below.")]),t._v(" "),e("h3",{attrs:{id:"chronicles-default-output-device"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chronicles-default-output-device"}},[t._v("#")]),t._v(" chronicles_default_output_device")]),t._v(" "),e("p",[t._v('When a sink doesn\'t explicitly specify a particular log destination,\nChronicles will log to "stdout" by default on all platforms except Android. Use this define to specify a different default choice.')]),t._v(" "),e("h3",{attrs:{id:"chronicles-streams"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chronicles-streams"}},[t._v("#")]),t._v(" chronicles_streams")]),t._v(" "),e("p",[t._v("While having multiple log sinks enables you to record the same stream of\nevents in multiple formats and destinations, "),e("code",[t._v("chronicles_streams")]),t._v(" allows\nyou to define additional independent streams of events identified by their\nname. In the code, each logging statement is associated with exactly one\nlog stream, which in turn has an associated list of sinks.")]),t._v(" "),e("p",[t._v("The syntax for defining streams closely resembles the syntax for defining\nsinks:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("textlog[textlines],transactions[json[file(transactions.json)]]")])])]),t._v(" "),e("p",[t._v("This will create two streams, called "),e("code",[t._v("textlog")]),t._v(" and "),e("code",[t._v("transactions")]),t._v(".\nThe former will be considered the default stream associated with unqualified\nlogging statements, but each of the streams will exist as a separate symbol\nin the code, supporting the full set of logging operations:")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[t._v("textlog"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("debug "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"about to create a transaction"')]),t._v("\ntransactions"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("info "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"transaction created"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buyer "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" alice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" seller "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bob\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("The streams created through "),e("code",[t._v("chronicles_streams")]),t._v(" will be exported by the\n"),e("code",[t._v("chronicles")]),t._v(" module itself, but you can also introduce additional streams\nin your own modules by using the helpers "),e("code",[t._v("logStream")]),t._v(" and "),e("code",[t._v("customLogStream")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"chronicles-enabled-topics"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chronicles-enabled-topics"}},[t._v("#")]),t._v(" chronicles_enabled_topics")]),t._v(" "),e("p",[t._v("All logging statements may be associated with a statically known list of\ntopics. Usually, this is done by specifying the "),e("code",[t._v("topics")]),t._v(" property in a\nparticular "),e("code",[t._v("logScope")]),t._v(", but you can also specify it for individual log\nstatements.")]),t._v(" "),e("p",[t._v("You can use the "),e("code",[t._v("chronicles_enabled_topics")]),t._v(" option to specify the list of\ntopics for which the logging statements should produce output. All other\nlogging statements will be erased at compile-time from the final code.\nWhen the list includes multiple topics, any of them is considered a match.")]),t._v(" "),e("blockquote",[e("p",[t._v("In both contexts, the list of topics is written as a comma or space-separated\nstring of case-sensitive topic names.")])]),t._v(" "),e("p",[t._v("In the list of topics, you can also optionally provide a log level after the\ntopic, separated with a colon from the topic. If a log level is provided it will\noverrule the "),e("code",[t._v("chronicles_log_level")]),t._v(" setting. The log level can be defined as\n"),e("code",[t._v("LogLevel")]),t._v(" values or directly as the corresponding integer values.")]),t._v(" "),e("p",[t._v("e.g. "),e("code",[t._v("-d:chronicles_enabled_topics:MyTopic:DEBUG,AnotherTopic:5")])]),t._v(" "),e("h3",{attrs:{id:"chronicles-required-topics"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chronicles-required-topics"}},[t._v("#")]),t._v(" chronicles_required_topics")]),t._v(" "),e("p",[t._v("Similar to "),e("code",[t._v("chronicles_enabled_topics")]),t._v(", but requires the logging statements\nto have all of the topics specified in this list.")]),t._v(" "),e("p",[t._v("You cannot specify "),e("code",[t._v("chronicles_enabled_topics")]),t._v(" and "),e("code",[t._v("chronicles_required_topics")]),t._v("\nat the same time.")]),t._v(" "),e("h3",{attrs:{id:"chronicles-disabled-topics"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chronicles-disabled-topics"}},[t._v("#")]),t._v(" chronicles_disabled_topics")]),t._v(" "),e("p",[t._v("The dual of "),e("code",[t._v("chronicles_enabled_topics")]),t._v(". This option specifies a black-list\nof topics for which the associated logging statements should be erased from\nthe program.")]),t._v(" "),e("p",[t._v("Topics in "),e("code",[t._v("chronicles_disabled_topics")]),t._v(" have precedence over the ones in\n"),e("code",[t._v("chronicles_enabled_topics")]),t._v(" or "),e("code",[t._v("chronicles_required_topics")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"chronicles-thread-ids"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chronicles-thread-ids"}},[t._v("#")]),t._v(" chronicles_thread_ids")]),t._v(" "),e("p",[t._v("Enables or disables logging of the thread id. Can also be set in each log line:")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[t._v("info "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"with thread id"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" chroniclesThreadIds "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" true\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h3",{attrs:{id:"chronicles-line-endings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chronicles-line-endings"}},[t._v("#")]),t._v(" chronicles_line_endings")]),t._v(" "),e("p",[t._v("Your choice of "),e("code",[t._v("posix")]),t._v(" ("),e("code",[t._v("\\n")]),t._v("), "),e("code",[t._v("windows")]),t._v(" ("),e("code",[t._v("\\r\\n")]),t._v(") or "),e("code",[t._v("native")]),t._v(" (default) line\nendings.")]),t._v(" "),e("h3",{attrs:{id:"chronicles-log-level"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chronicles-log-level"}},[t._v("#")]),t._v(" chronicles_log_level")]),t._v(" "),e("p",[t._v("This option can be used to erase at compile-time all log statements, not\nmatching the specified minimum log level.")]),t._v(" "),e("p",[t._v("Possible values are "),e("code",[t._v("TRACE")]),t._v(", "),e("code",[t._v("DEBUG")]),t._v(", "),e("code",[t._v("INFO")]),t._v(", "),e("code",[t._v("NOTICE")]),t._v(", "),e("code",[t._v("WARN")]),t._v(", "),e("code",[t._v("ERROR")]),t._v(", "),e("code",[t._v("FATAL")]),t._v(",\nand "),e("code",[t._v("NONE")]),t._v(". The default value is "),e("code",[t._v("DEBUG")]),t._v(" in debug builds and "),e("code",[t._v("INFO")]),t._v(" in\nrelease mode.")]),t._v(" "),e("h3",{attrs:{id:"chronicles-runtime-filtering"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chronicles-runtime-filtering"}},[t._v("#")]),t._v(" chronicles_runtime_filtering")]),t._v(" "),e("p",[t._v("This option enables the run-filtering capabilities of Chronicles.\nThe run-time filtering is controlled through the procs "),e("code",[t._v("setLogEnabled")]),t._v(",\n"),e("code",[t._v("setLogLevel")]),t._v(" and "),e("code",[t._v("setTopicState")]),t._v(", corresponding to their respective compile-time\noptions:")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" LogLevel "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v("\n  NONE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TRACE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DEBUG"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" INFO"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NOTICE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" WARN"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ERROR"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FATAL\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" TopicState "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v("\n  Normal"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Enabled"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Required"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Disabled\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLogEnabled"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("enabled"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bool"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLogLevel"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("level"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" LogLevel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTopicState"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newState"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" TopicState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" logLevel "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LogLevel"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("NONE\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bool\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Per-sink version, when using multiple sinks")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLogEnabled"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("enabled"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bool"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sinkIdx"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" int"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLogLevel"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("level"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" LogLevel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sinkIdx"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" int"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTopicState"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sinkIdx"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" int"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newState"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" TopicState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" logLevel "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LogLevel"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("NONE\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bool\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br")])]),e("p",[t._v("The log levels available at runtime - and therefore to "),e("code",[t._v("setLogLevel()")]),t._v(" - are\nthose greater than or equal to the one set at compile time by\n"),e("code",[t._v("chronicles_log_level")]),t._v(".")]),t._v(" "),e("p",[t._v("It is also possible for a specific topic to overrule the global "),e("code",[t._v("LogLevel")]),t._v(", set\nby "),e("code",[t._v("setLogLevel")]),t._v(", by setting the optional "),e("code",[t._v("logLevel")]),t._v(" parameter in\n"),e("code",[t._v("setTopicState")]),t._v(" to a valid "),e("code",[t._v("LogLevel")]),t._v(".")]),t._v(" "),e("p",[t._v("Runtime filtering is disabled by default - enable it using command line or "),e("code",[t._v("nim.cfg")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("-d:chronicles_runtime_filtering:on\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("Runtime filtering is performed before evaluating log parameters - in the following\nexample, "),e("code",[t._v("foo()")]),t._v(" will not be called:")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" int "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  debugEcho "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"in foo"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLogEnabled")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("false"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ninfo "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("h3",{attrs:{id:"chronicles-timestamps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chronicles-timestamps"}},[t._v("#")]),t._v(" chronicles_timestamps")]),t._v(" "),e("p",[t._v("This option controls the use of timestamps in the log output.\nPossible values are:")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("RfcTime")]),t._v(" (used by default)")]),t._v(" "),e("p",[t._v("Chronicles will use the human-readable format specified in\nRFC 3339: Date and Time on the Internet: Timestamps")]),t._v(" "),e("p",[t._v("https://tools.ietf.org/html/rfc3339")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("RfcUtcTime")])]),t._v(" "),e("p",[t._v("Chronicles will use the UTC but in human-readable format specified in\nRFC 3339: Date and Time on the Internet: Timestamps")]),t._v(" "),e("p",[t._v("https://tools.ietf.org/html/rfc3339")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("UnixTime")])]),t._v(" "),e("p",[t._v('Chronicles will write a single float value for the number\nof seconds since the "Unix epoch"')]),t._v(" "),e("p",[t._v("https://en.wikipedia.org/wiki/Unix_time")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("None")]),t._v(" or "),e("code",[t._v("NoTimestamps")])]),t._v(" "),e("p",[t._v("Chronicles will not include timestamps in the log output.")])])]),t._v(" "),e("p",[t._v("Please note that the timestamp format can also be specified\nfor individual sinks (see "),e("code",[t._v("chronicles_sinks")]),t._v(").")]),t._v(" "),e("h3",{attrs:{id:"chronicles-line-numbers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chronicles-line-numbers"}},[t._v("#")]),t._v(" chronicles_line_numbers")]),t._v(" "),e("p",[t._v("This option, disabled by default, enables the display of filename and line number\nwhere each record was instantiated. It adds a property "),e("code",[t._v("file")]),t._v(" to the output, for example:")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("file: example.nim:15\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("While "),e("code",[t._v("chronicles_line_numbers")]),t._v(" sets the default option for all records, it is\nalso possible to control the same property in a lexical scope or for a particular\nlog statement with "),e("code",[t._v("chroniclesLineNumbers")]),t._v(", which can be either "),e("code",[t._v("true")]),t._v(" or "),e("code",[t._v("false")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"chronicles-colors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chronicles-colors"}},[t._v("#")]),t._v(" chronicles_colors")]),t._v(" "),e("p",[t._v("This option controls the default color scheme used by Chronicles for\nits human-readable text formats when sent to the standard output streams.")]),t._v(" "),e("p",[t._v("Possible values are:")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("auto")]),t._v(" or "),e("code",[t._v("AutoColors")]),t._v(" (used by default)")]),t._v(" "),e("p",[t._v("In this mode, colors are used when at least one destination is a terminal and\ndisabled otherwise. Take care to use separate sinks for stdout and files when\nusing this option or the file will receive colored output when stdout is a\nterminal.")]),t._v(" "),e("p",[t._v("Automatic mode respects the "),e("a",{attrs:{href:"https://no-color.org/",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("NO_COLOR=1")]),e("OutboundLink")],1),t._v(" environment\nvariable.")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("ansi")]),t._v(" or "),e("code",[t._v("AnsiColors")])]),t._v(" "),e("p",[t._v("Output suitable for terminals supporting the standard ANSI escape codes:\nhttps://en.wikipedia.org/wiki/ANSI_escape_code")]),t._v(" "),e("p",[t._v("This includes most terminal emulators on modern Unix-like systems,\nWindows console replacements such as ConEmu, and the native Console\nand PowerShell applications on Windows 10.")]),t._v(" "),e("p",[t._v("In this mode, colors codes are always emitted, ie even for files")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("no")]),t._v(" or "),e("code",[t._v("NoColors")])]),t._v(" "),e("p",[t._v("Chronicles will produce color-less output. Please note that this is the\ndefault mode for sinks logging only to files or for sinks using the json\nformat.")])])]),t._v(" "),e("h3",{attrs:{id:"chronicles-indent"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chronicles-indent"}},[t._v("#")]),t._v(" chronicles_indent")]),t._v(" "),e("p",[t._v("This option sets the desired number of spaces that Chronicles should\nuse as indentation in the "),e("code",[t._v("textblocks")]),t._v(" format.")]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("All of the discussed options are case-insensitive and accept a number of\ntruthy and falsy values such as "),e("code",[t._v("on")]),t._v(", "),e("code",[t._v("off")]),t._v(", "),e("code",[t._v("true")]),t._v(", "),e("code",[t._v("false")]),t._v(", "),e("code",[t._v("0")]),t._v(", "),e("code",[t._v("1")]),t._v(",\n"),e("code",[t._v("yes")]),t._v(", "),e("code",[t._v("no")]),t._v(" or "),e("code",[t._v("none")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"working-with-file-outputs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#working-with-file-outputs"}},[t._v("#")]),t._v(" Working with "),e("code",[t._v("file")]),t._v(" outputs")]),t._v(" "),e("p",[t._v("When a stream has "),e("code",[t._v("file")]),t._v(" outputs, you may choose to provide the log file\nlocation at run-time. Chronicles will create each log file lazily when the\nfirst log record is written. This gives you a chance to modify the default\ncompile-time path associated with each file output by calling the "),e("code",[t._v("open")]),t._v("\nproc on an "),e("code",[t._v("output")]),t._v(" symbol associated with the stream:")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# my_program.nim")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" config "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadConfiguration")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" success "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" defaultChroniclesStream"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("output"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("logFile"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fmAppend"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ninfo "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"APPLICATION STARTED"')]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("p",[t._v("Compiled with:")]),t._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("nim c -d:chronicles_sinks"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("textlines"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" my_program.nim\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("As you can see above, the default stream in Chronicles is called\n"),e("code",[t._v("defaultChroniclesStream")]),t._v(". If the stream had multiple file outputs,\nthey would have been accessible separately as "),e("code",[t._v("outputs[0]")]),t._v(", "),e("code",[t._v("outputs[1]")]),t._v("\nand so on. "),e("code",[t._v("output")]),t._v(" is a simple short-cut referring to the first of them.")]),t._v(" "),e("p",[t._v("When the compile-time configuration doesn't specify a default file name for\na particular file output, Chronicles will use the following rules for picking\nthe default automatically:")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("The log file is created in the current working directory and its name\nmatches the name of the stream (plus a "),e("code",[t._v(".log")]),t._v(" extension). The exception\nfor this rule is the default stream, for which the log file will be\nassigned the name of the application binary.")])]),t._v(" "),e("li",[e("p",[t._v("If more than one unnamed file outputs exist for a given stream,\nchronicles will add an index such as "),e("code",[t._v(".2.log")]),t._v(", "),e("code",[t._v(".3.log")]),t._v(" .. "),e("code",[t._v(".N.log")]),t._v("\nto the final file name.")])])]),t._v(" "),e("h2",{attrs:{id:"working-with-dynamic-outputs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#working-with-dynamic-outputs"}},[t._v("#")]),t._v(" Working with "),e("code",[t._v("dynamic")]),t._v(" outputs")]),t._v(" "),e("p",[t._v("A "),e("code",[t._v("dynamic")]),t._v(" output redirects all logged messages to a closure supplied by\nthe host application. Similar to working with file ouputs "),e("a",{attrs:{href:"#working-with-file-outputs"}},[t._v("file outputs")]),t._v(",\nyou can use the "),e("code",[t._v("output")]),t._v(" and "),e("code",[t._v("outputs")]),t._v(" properties of a Chronicles stream\nto specify a gcsafe closure that will be called from any thread that does\nlogging.")]),t._v(" "),e("p",[t._v("Assuming you have a single dynamic output ("),e("code",[t._v("-d:chronicles_sinks=dynamic")]),t._v("):")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[t._v("defaultChroniclesStream"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("output"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("writer "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("logLevel"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" LogLevel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" msg"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" LogOutputStr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{.")]),t._v("gcsafe"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    database"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeLogEntry")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Control colors (in autocolors mode)")]),t._v("\ndefaultChroniclesStream"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("output"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("colors "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" false\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("h2",{attrs:{id:"using-chronicles-with-nosideeffect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#using-chronicles-with-nosideeffect"}},[t._v("#")]),t._v(" Using Chronicles with "),e("code",[t._v("{.noSideEffect.}")])]),t._v(" "),e("p",[t._v("Usage of Chronicles from "),e("code",[t._v("noSideEffect")]),t._v(" procs (or "),e("code",[t._v("func")]),t._v(") is limited to the\n"),e("code",[t._v("trace")]),t._v(" statement. Normal logging can be considered a side effect, but "),e("code",[t._v("trace")]),t._v("\nis meant as a debugging aid. It's analogous to Nim's "),e("code",[t._v("debugEcho")]),t._v(", which also\nbypasses the effect system.")]),t._v(" "),e("h2",{attrs:{id:"teaching-chronicles-about-your-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#teaching-chronicles-about-your-types"}},[t._v("#")]),t._v(" Teaching Chronicles about your types")]),t._v(" "),e("p",[t._v("Properties logged by "),e("code",[t._v("chronicles")]),t._v(" go through a formatting pipeline that can be\ncustomized, depending on the log format.")]),t._v(" "),e("p",[t._v("For example, a "),e("code",[t._v("git")]),t._v(" logger would use the short hash in text formats and the\nfull SHA1 hash in "),e("code",[t._v("json")]),t._v(".")]),t._v(" "),e("p",[t._v("How "),e("code",[t._v("chronicles")]),t._v(" presents a property can be customized using "),e("code",[t._v("formatIt")]),t._v(" and\n"),e("code",[t._v("expandIt")]),t._v(", though which each property is passed before formatting.")]),t._v(" "),e("p",[t._v("When choosing how to log a type, prioritise brevity in text outputs and\ncompleteness in "),e("code",[t._v("json")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"formatting-transformation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#formatting-transformation"}},[t._v("#")]),t._v(" Formatting transformation")]),t._v(" "),e("p",[t._v("Before properties are passed to log outputs like "),e("code",[t._v("textlines")]),t._v(" and "),e("code",[t._v("json")]),t._v(", they\nare transformed using the "),e("code",[t._v("expandIt")]),t._v(" and "),e("code",[t._v("formatIt")]),t._v(" transformations.")]),t._v(" "),e("p",[t._v("The default transformation simply passes the property to the output unaltered,\nletting the output format it using its own defaults.")]),t._v(" "),e("h4",{attrs:{id:"formatit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#formatit"}},[t._v("#")]),t._v(" "),e("code",[t._v("formatIt")])]),t._v(" "),e("p",[t._v("You can instruct Chronicles to alter this default behavior for a particular\ntype by providing a "),e("code",[t._v("chronicles.formatIt")]),t._v(" override:")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Dollar "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" int\nchronicles"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("formatIt")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dollar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("int"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("The "),e("code",[t._v("formatIt")]),t._v(" block can evaluate to any expression that will be then\nsubjected to the standard serialization logic described above, such as when\nreturning a "),e("code",[t._v("tuple")]),t._v(" - logging "),e("code",[t._v("value = DivMod3(13)")]),t._v(" now results in\n"),e("code",[t._v("value = (4, 1)")]),t._v(" being written to the log.")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" chronicles"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("formats "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" chronicles\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" DivMod3 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" int\nchronicles"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("formatIt")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DivMod3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("div")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("mod")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("Note how "),e("code",[t._v("chronicles/formats")]),t._v(" is used for the import this time - this technique\nis useful if you want to avoid importing the full library in a module that\nitself doesn't do any logging.")]),t._v(" "),e("p",[t._v("This technique can also be used to mask passwords and other sensitive\ninformation in logs.")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" chronicles"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("formats "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" chronicles\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Password "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("distinct")]),t._v(" string\nchronicles"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("formatIt")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Password"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"***"')]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("h4",{attrs:{id:"expandit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expandit"}},[t._v("#")]),t._v(" "),e("code",[t._v("expandIt")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("expandIt")]),t._v(" override can be used to turn any logged property of a\nparticular type into multiple properties:")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[t._v("chronicles"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("expandIt")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EncryptedEnvelope"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  peer "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" it"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("fromAddress\n  msg  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" it"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("decryptMsg\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" e "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("EncryptedEnvelope")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("..")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".)")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The following two statements are equivalent:")]),t._v("\ninfo "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Received message"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e\ninfo "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Received message"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" peer "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("fromAddress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" msg "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("decryptMsg\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("p",[t._v("You can also derive the names of the expanded properties from the name of\nthe original logged property. This is achieved by using the Nim's backticks\nsyntax to construct the expanded property names:")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[t._v("chronicles"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("expandIt")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("User"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# You can use both identifiers and string literals:")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token ignore"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("it Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" it"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("name\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("it "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"LastSeen"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" it"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("lastSeen\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" alice "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("User")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Alice"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("..")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".)")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The following two statements are equivalent:")]),t._v("\ninfo "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sending message"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" recipient "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" alice\ninfo "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sending message"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" recipientName "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" alice"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" recipientLastSeen "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" alice"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("lastSeen\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br")])]),e("h3",{attrs:{id:"per-output-customization"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#per-output-customization"}},[t._v("#")]),t._v(" Per-output customization")]),t._v(" "),e("p",[t._v("Once a property been formatted or expanded, outputs are responsible for turning\nthe value into an output-appropriate format. For example, "),e("code",[t._v("json")]),t._v(" will render\n"),e("code",[t._v("object")]),t._v(" types as JSON objects etc.")]),t._v(" "),e("h4",{attrs:{id:"customizing-textlines-textblocks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#customizing-textlines-textblocks"}},[t._v("#")]),t._v(" Customizing "),e("code",[t._v("textlines")]),t._v(", "),e("code",[t._v("textblocks")])]),t._v(" "),e("p",[t._v("In the text formats ("),e("code",[t._v("textlines")]),t._v(" and "),e("code",[t._v("textblocks")]),t._v("), the Nim's standard "),e("code",[t._v("$")]),t._v("\noperator will be used to convert the logged properties to strings.")]),t._v(" "),e("p",[t._v("Fields of objects and tuples are each passed through "),e("code",[t._v("formatIt")]),t._v(" and the outcome\nis formatted recursively, printing the instance similar to how "),e("code",[t._v("$")]),t._v(" would print\nit.")]),t._v(" "),e("h4",{attrs:{id:"customizing-json"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#customizing-json"}},[t._v("#")]),t._v(" Customizing "),e("code",[t._v("json")])]),t._v(" "),e("p",[t._v("In the "),e("code",[t._v("json")]),t._v(" format, "),e("a",{attrs:{href:"https://github.com/status-im/nim-json-serialization",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("json_serialization")]),e("OutboundLink")],1),t._v("\nis used to write log entries. To customize, provide a "),e("a",{attrs:{href:"https://status-im.github.io/nim-json-serialization/reference.html#custom-parsers-and-writers",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("writeValue")]),e("OutboundLink")],1),t._v("\noverload for the default flavor:")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeValue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" JsonWriter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" MyType"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{.")]),t._v("raises"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("IOError"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  w"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("While it's a good idea to provide a corresponding "),e("code",[t._v("readValue")]),t._v(" implementation,\nthis is not needed for "),e("code",[t._v("chronicles")]),t._v(".")]),t._v(" "),e("p",[t._v("To avoid a hard dependency on "),e("code",[t._v("json_serialization")]),t._v(" in libraries, :")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" stew"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("importops\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" tryImport json_serialization"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeValue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" JsonWriter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" MyType"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{.")]),t._v("raises"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("IOError"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    w"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("h2",{attrs:{id:"custom-log-streams"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#custom-log-streams"}},[t._v("#")]),t._v(" Custom Log Streams")]),t._v(" "),e("h3",{attrs:{id:"logstream"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#logstream"}},[t._v("#")]),t._v(" "),e("code",[t._v("logStream")])]),t._v(" "),e("p",[t._v("As an alternative to specifying multiple output streams with the\n"),e("code",[t._v("chronicles_streams")]),t._v(" option, you can also introduce additional\nstreams within the code of your program. A typical way to do this\nwould be to introduce a proxy module that imports and re-exports\n"),e("code",[t._v("chronicles")]),t._v(" while adding additional streams with "),e("code",[t._v("logStream")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" chronicles\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" chronicles\n\nlogStream transactions"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("json"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("transactions"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("json"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("The expression expected by "),e("code",[t._v("logStream")]),t._v(" has exactly the same format\nas the compile-time option and produces the same effect. In this particular\nexample, it will create a new stream called "),e("code",[t._v("transactions")]),t._v(" that will be sent\nto a JSON file named "),e("code",[t._v("transactions.json")]),t._v(".")]),t._v(" "),e("p",[t._v("After importing the proxy module, you'll be able to create records with any\nof the logging statements in the usual way:")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" transactions_log\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\ntransactions"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("error "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"payment gateway time-out"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" orderId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    networkStatus "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("obtainNetworkStatus")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("h3",{attrs:{id:"customlogstream"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#customlogstream"}},[t._v("#")]),t._v(" "),e("code",[t._v("customLogStream")])]),t._v(" "),e("p",[e("code",[t._v("customLogStream")]),t._v(" enables you to implement arbitrary log formats and\ndestinations.")]),t._v(" "),e("p",[t._v('Each logging statement is translated to a set of calls operating over\na structure called "Log Record" (with one instance created per logging\nstatement). New log formats can be implemented by defining a suitable\nlog record type. Let\'s demonstrate this by implementing a simple XML logger:')]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" xmltree"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" chronicles\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" XmlRecord"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Output"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")]),t._v("\n  output"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Output\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("initLogRecord"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" XmlRecord"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lvl"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" LogLevel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                        topics"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  r"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("output"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("append "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<event name=\\""')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("escape")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\" severity=\\""')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("lvl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\">\\n"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProperty"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" XmlRecord"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" auto"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  r"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("output"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("append textBlockIndent"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('">"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("escape")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("val"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"</"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('">\\n"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("flushRecord"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" XmlRecord"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  r"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("output"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("append "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"</event>\\n"')]),t._v("\n  r"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("output"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("flushOutput\n\ncustomLogStream xmlout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("XmlRecord"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("StdOutOutput"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\npublicLogScope"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  stream "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" xmlout\n\ninfo "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"New Video"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" franchise "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tom & Jerry"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" episode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Smarty Cat"')]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br")])]),e("p",[t._v("The produced output from the example will be:")]),t._v(" "),e("div",{staticClass:"language-xml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("event")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("New Video"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("severity")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("INFO"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("tid")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("0"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("tid")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("episode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Smarty Cat"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("episode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("franchise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Tom "),e("span",{pre:!0,attrs:{class:"token entity named-entity",title:"&"}},[t._v("&amp;")]),t._v(" Jerry"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("franchise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("event")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("As you can see, "),e("code",[t._v("customLogStream")]),t._v(" looks similar to a regular "),e("code",[t._v("logStream")]),t._v(",\nbut it expects a log record type as its only argument.")]),t._v(" "),e("p",[t._v("The record type is implemented by providing suitable definitons for\n"),e("code",[t._v("initLogRecord")]),t._v(", "),e("code",[t._v("setProperty")]),t._v(" and "),e("code",[t._v("flushRecord")]),t._v(".\nWe recommend defining these operations as templates because this will\nfacilitate the aggressive constant-folding employed by Chronicles (discussed\nin more details in the next section). We also recommend making your log\nrecord types parametric on an "),e("code",[t._v("Output")]),t._v(" type, because this will allow the\nusers of the code to specify any of the output types defined in Chronicles\nitself (see the module "),e("code",[t._v("log_output")]),t._v(" for a list of those).")]),t._v(" "),e("p",[t._v("As demonstrated in the example above, you can set the "),e("code",[t._v("stream")]),t._v(" property in\na Chronicles lexical scope to redirect all unqualified log statements to a\nparticular default stream.")]),t._v(" "),e("h3",{attrs:{id:"custom-sinks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#custom-sinks"}},[t._v("#")]),t._v(" Custom sinks")]),t._v(" "),e("p",[t._v("Custom sinks are modules that export a "),e("code",[t._v("LogRecord")]),t._v(" type with the following\nminimal API:")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" LogRecord"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Output; format"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("FormatSpec"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")]),t._v("\n  output"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*:")]),t._v(" Output\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("initLogRecord"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" LogRecord"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lvl"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" LogLevel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" topics"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProperty"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" LogRecord"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" auto"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("flushRecord"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" LogRecord"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("Assuming a module named "),e("code",[t._v("my_log_record.nim")]),t._v(" with the above declarations, it\ncan be plugged into "),e("code",[t._v("chronicles_sinks")]),t._v(" like so:")]),t._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("nim c -d:chronicles_sinks"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("my_log_record "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("Outputs ("),e("code",[t._v("stdout")]),t._v(", "),e("code",[t._v("file")]),t._v(" etc) and options ("),e("code",[t._v("nocolors")]),t._v(" etc) can be passed to the\nsink definition as usual.")]),t._v(" "),e("p",[t._v("See "),e("code",[t._v("tests/xml_records.nim")]),t._v(" for a practical example.")]),t._v(" "),e("h2",{attrs:{id:"cost-of-abstractions-and-implementation-details"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cost-of-abstractions-and-implementation-details"}},[t._v("#")]),t._v(" Cost of Abstractions and Implementation Details")]),t._v(" "),e("p",[t._v("Chronicles makes use of advanced compile-time programming techniques to\nproduce very efficient run-time code with minimal footprint.")]),t._v(" "),e("p",[t._v("The properties from lexical scopes are merged at compile-time with the\nlog statement arguments and if any constant variables are about to be\nsent to the log output, they will be first concatenated by the compiler\nin order to issue the minimum number of "),e("code",[t._v("write")]),t._v(" operations possible.")]),t._v(" "),e("p",[t._v("The dynamic scopes store their run-time bindings on the stack, in special\nframe structures forming a linked list. This list is traversed on each log\nstatement and each active property leads to one dynamically dispatched call.")]),t._v(" "),e("p",[t._v("To support constant-time topic filtering and property overriding in dynamic\nscopes, Chronicles consumes a large amount of thread-local memory, roughly\nproportional to the number of unique topic names and property names used\nin the program.")]),t._v(" "),e("h2",{attrs:{id:"future-directions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#future-directions"}},[t._v("#")]),t._v(" Future Directions")]),t._v(" "),e("p",[t._v("At the moment, Chronicles intentionally omits certain features expected\nfrom a logging library such as log rotation and archival. We recommend\nfollowing the guidelines set in the "),e("a",{attrs:{href:"https://12factor.net/logs",target:"_blank",rel:"noopener noreferrer"}},[t._v("12-factor app methodology"),e("OutboundLink")],1),t._v("\nand sending your log output to "),e("code",[t._v("stdout")]),t._v(". It should be the responsibility\nof the supervising daemon of the app to implement log rotation and archival.")]),t._v(" "),e("p",[t._v("We understand that certain users would want to take advantage of the\nfile sinks provided by Chronicles and these users may benefit from the\naforementioned features. If the Nim community provides a package for\na low-level abstraction of an automatically rotated and archived log\nfile, Chronicles will provide options for using it.")])])}),[],!1,null,null,null);s.default=n.exports}}]);