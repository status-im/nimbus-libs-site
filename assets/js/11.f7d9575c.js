(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{367:function(e,t,s){"use strict";s.r(t);var a=s(44),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"stew"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stew"}},[e._v("#")]),e._v(" Stew")]),e._v(" "),s("h1",{attrs:{id:"stew-status-e-something-w-something"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stew-status-e-something-w-something"}},[e._v("#")]),e._v(" stew - status e-something w-something")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://opensource.org/licenses/Apache-2.0",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://img.shields.io/badge/License-Apache%202.0-blue.svg",alt:"License: Apache"}}),s("OutboundLink")],1),e._v(" "),s("a",{attrs:{href:"https://opensource.org/licenses/MIT",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://img.shields.io/badge/License-MIT-blue.svg",alt:"License: MIT"}}),s("OutboundLink")],1),e._v(" "),s("img",{attrs:{src:"https://img.shields.io/badge/stability-experimental-orange.svg",alt:"Stability: experimental"}}),e._v(" "),s("img",{attrs:{src:"https://github.com/status-im/nim-stew/workflows/CI/badge.svg",alt:"Github action"}})]),e._v(" "),s("p",[s("code",[e._v("stew")]),e._v(" is collection of utilities, std library extensions and budding libraries\nthat are frequently used at Status, but are too small to deserve their own\ngit repository.")]),e._v(" "),s("p",[e._v("We also use "),s("code",[e._v("stew")]),e._v(" as a staging ground for code that has yet to be\nbattle-tested.")]),e._v(" "),s("p",[e._v("Some of these libraries may eventually be proposed for inclusion in Nim or\nbroken out into separate repositories.")]),e._v(" "),s("h2",{attrs:{id:"notable-libraries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notable-libraries"}},[e._v("#")]),e._v(" Notable libraries")]),e._v(" "),s("p",[e._v("Libraries are documented either in-module or on a separate README in their\nrespective folders")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("arraybuf")]),e._v(" - "),s("code",[e._v("array")]),e._v("-based fixed-capacity dynamic-length buffer")]),e._v(" "),s("li",[s("code",[e._v("arrayops")]),e._v(" - small helpers and operations on "),s("code",[e._v("array")]),e._v("/"),s("code",[e._v("openArray")])]),e._v(" "),s("li",[s("code",[e._v("assign2")]),e._v(" - fast assignments (unlike the "),s("code",[e._v("=")]),e._v(" operator in nim which is very slow)")]),e._v(" "),s("li",[s("code",[e._v("bitops2")]),e._v(" - an updated version of "),s("code",[e._v("bitops.nim")]),e._v(", filling in gaps in original code")]),e._v(" "),s("li",[s("code",[e._v("byteutils")]),e._v(" - utilities that make working with the Nim "),s("code",[e._v("byte")]),e._v(" type convenient")]),e._v(" "),s("li",[s("code",[e._v("endians2")]),e._v(" - utilities for converting to and from little / big endian integers")]),e._v(" "),s("li",[s("code",[e._v("io2")]),e._v(" - I/O without exceptions")]),e._v(" "),s("li",[s("code",[e._v("leb128")]),e._v(" - utilities for working with LEB128-based formats (such as the varint style found in protobuf)")]),e._v(" "),s("li",[s("code",[e._v("objects")]),e._v(" - get an object's base type at runtime, as a string")]),e._v(" "),s("li",[s("code",[e._v("ptrops")]),e._v(" - pointer arithmetic utilities")]),e._v(" "),s("li",[s("code",[e._v("shims")]),e._v(" - backports of nim "),s("code",[e._v("devel")]),e._v(" code to the stable version that Status is using")]),e._v(" "),s("li",[s("code",[e._v("sequtils2")]),e._v(" - extensions to the "),s("code",[e._v("sequtils")]),e._v(" module for working conveniently with "),s("code",[e._v("seq")])]),e._v(" "),s("li",[s("code",[e._v("staticfor")]),e._v(" - compile-time loop unrolling")])]),e._v(" "),s("h2",{attrs:{id:"layout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#layout"}},[e._v("#")]),e._v(" Layout")]),e._v(" "),s("p",[s("code",[e._v("stew")]),e._v(" modules are made to be fairly independent of each other, but generally\nfollow the following layout - if you've used C++'s "),s("code",[e._v("boost")]),e._v(", you'll feel right at\nhome:")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Single-module libraries")]),e._v("\nstew/small.nim "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# small libraries that fits in one module")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Multi-module libraries")]),e._v("\nstew/libname.nim "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Main import file")]),e._v("\nstew/libname/stuff.nim "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Detail import file")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Nim standard library shims that contain forwards-compatibility code to manage")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# support for multiple nim versions - code in here typically has been taken")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# from nim `devel` branch and `name` will reexport the corresponding std lib")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# module")]),e._v("\nstew/shims/macros.nim "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# module that reexports `macros.nim` adding code from newer nim versions")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Tests are in the tests folder (duh!)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To execute, run either `all_tests.nim` or specific `test_xxx.nim` files:")]),e._v("\nnim c -r tests/all_tests\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])]),s("h2",{attrs:{id:"compatibility"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compatibility"}},[e._v("#")]),e._v(" Compatibility")]),e._v(" "),s("p",[e._v("One of the goals of "),s("code",[e._v("stew")]),e._v(" is to provide backwards and forwards compatibility\nfor different Nim versions, such that code using "),s("code",[e._v("stew")]),e._v(" works well with multiple\nversions of Nim. If "),s("code",[e._v("stew")]),e._v(" is not working with the Nim version you're using, we\nwelcome patches.")]),e._v(" "),s("p",[e._v("You can create multiple versions of your code using the following pattern:")]),e._v(" "),s("div",{staticClass:"language-nim line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-nim"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("when")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("NimMajor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("NimMinor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("NimPatch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("19")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("discard")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("elif")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("NimMajor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("NimMinor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("NimPatch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("19")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("discard")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{.")]),e._v("fatal"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unsupported nim version"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("h2",{attrs:{id:"using-stew-in-your-project"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-stew-in-your-project"}},[e._v("#")]),e._v(" Using stew in your project")]),e._v(" "),s("p",[s("code",[e._v("stew")]),e._v(", due to its experimental nature, does "),s("strong",[e._v("not")]),e._v(" have a stable API/ABI and\nfeatures may be changed or removed. Releases are done on a case-by-case basis\nfor when some specific project needs them - open an issue if you need one!")]),e._v(" "),s("p",[e._v("When making a release, we will strive to update the "),s("code",[e._v("minor")]),e._v(" version whenever a\nmajor component is removed or changed and the "),s("code",[e._v("patch")]),e._v(" version if changes are\nmostly additive, but due to the nature of the library being a collection of\nsmaller libraries, these guidelines may be streched at times.")]),e._v(" "),s("p",[e._v("It is not expected that the library will reach a "),s("code",[e._v("1.0")]),e._v(" release. Instead, mature\ncode will be "),s("a",{attrs:{href:"https://github.com/status-im/nim-stew/commit/2cf408b9609fc3e6c238ddbd90ab31802e650212",target:"_blank",rel:"noopener noreferrer"}},[e._v("graduated"),s("OutboundLink")],1),e._v("\ninto independent libraries that can follow a regular release schedule.")]),e._v(" "),s("ul",[s("li",[e._v("libraries that depend on "),s("code",[e._v("stew")]),e._v(" should specify the lowest possible required\nversion ("),s("code",[e._v("stew >= 0.2")]),e._v(") that contain the necessary features that they use -\nthis may be lower than latest released version. An upper bound\n("),s("code",[e._v("stew >= 0.2 & <0.3")]),e._v(") or caret versions ("),s("code",[e._v("stew ^0.2")]),e._v(") may be used but it is\nnot recommended since this will make your library harder to compose with other\nlibraries that depend on "),s("code",[e._v("stew")]),e._v(".")]),e._v(" "),s("li",[e._v("applications that depend on stew directly or indirectly should specify a\ncommit ( "),s("code",[e._v("stew#abc...")]),e._v(") or a specific version ("),s("code",[e._v("stew == 0.2.3")]),e._v(") - this ensures\nthe application will continue to work irrespective of stew updates")]),e._v(" "),s("li",[e._v("alternatively, you can just copy the relevant files of stew into your project\nor use a submodule - this approach maximises composability since each consumer\nof stew no longer has to restrict the specific version for other consumers")])]),e._v(" "),s("p",[e._v("Typically, you will import either a top-level library or drill down into its\nsubmodules:")]),e._v(" "),s("div",{staticClass:"language-nim line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-nim"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" stew"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("bitops2\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" stew"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("ranges"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("bitranges\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("⚠️ No API/ABI stability - in applications, pick a commit and stick with it ⚠️")])])}),[],!1,null,null,null);t.default=n.exports}}]);