(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{368:function(t,e,s){"use strict";s.r(e);var a=s(44),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"eth"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eth"}},[t._v("#")]),t._v(" Eth")]),t._v(" "),s("p",[t._v("Ethereum-related utilities written in Nim. Includes things like Bloom filters, private/public key utilities, RLP, devp2p, and more.")]),t._v(" "),s("h2",{attrs:{id:"rlp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rlp"}},[t._v("#")]),t._v(" rlp")]),t._v(" "),s("h3",{attrs:{id:"introduction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),s("p",[t._v("A Nim implementation of the Recursive Length Prefix encoding (RLP) as specified\nin the Ethereum's "),s("a",{attrs:{href:"https://ethereum.github.io/yellowpaper/paper.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Yellow Paper"),s("OutboundLink")],1),t._v("\nand "),s("a",{attrs:{href:"https://github.com/ethereum/wiki/wiki/RLP",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wiki"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"reading-rlp-data"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reading-rlp-data"}},[t._v("#")]),t._v(" Reading RLP data")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Rlp")]),t._v(" type provided by this library represents a cursor over an RLP-encoded\nbyte stream.")]),t._v(" "),s("div",{staticClass:"language-nim line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-nim"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rlpFromBytes"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" openArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("byte"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Rlp\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"streaming-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#streaming-api"}},[t._v("#")]),t._v(" Streaming API")]),t._v(" "),s("p",[t._v("Once created, the "),s("code",[t._v("Rlp")]),t._v(" object will offer procs such as "),s("code",[t._v("isList")]),t._v(", "),s("code",[t._v("isBlob")]),t._v(",\n"),s("code",[t._v("getType")]),t._v(", "),s("code",[t._v("listLen")]),t._v(", "),s("code",[t._v("blobLen")]),t._v(" to determine the type of the value under\nthe cursor. The contents of blobs can be extracted with procs such as\n"),s("code",[t._v("toString")]),t._v(", "),s("code",[t._v("toBytes")]),t._v(" and "),s("code",[t._v("toInt")]),t._v(" without advancing the cursor.")]),t._v(" "),s("p",[t._v("Lists can be traversed with the standard "),s("code",[t._v("items")]),t._v(" iterator, which will advance\nthe cursor to each sub-item position and yield the "),s("code",[t._v("Rlp")]),t._v(" object at that point.\nAs an alternative, "),s("code",[t._v("listElem")]),t._v(" can return a new "),s("code",[t._v("Rlp")]),t._v(" object adjusted to a\nparticular sub-item position without advancing the original cursor.\nKeep in mind that copying "),s("code",[t._v("Rlp")]),t._v(" objects is cheap and you can create as many\ncursors pointing to different positions in the RLP stream as necessary.")]),t._v(" "),s("p",[s("code",[t._v("skipElem")]),t._v(" will advance the cursor to the next position in the current list.\n"),s("code",[t._v("hasData")]),t._v(" will indicate that there are no more bytes in the stream that can\nbe consumed.")]),t._v(" "),s("p",[t._v("Another way to extract data from the stream is through the universal "),s("code",[t._v("read")]),t._v("\nproc that accepts a type as a parameter. You can pass any supported type\nsuch as "),s("code",[t._v("string")]),t._v(", "),s("code",[t._v("int")]),t._v(", "),s("code",[t._v("seq[T]")]),t._v(", etc, including composite user-defined\ntypes (see "),s("a",{attrs:{href:"#object-serialization"}},[t._v("Object Serialization")]),t._v("). The cursor\nwill be advanced just past the end of the consumed object.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("toXX")]),t._v(" and "),s("code",[t._v("read")]),t._v(" family of procs may raise a "),s("code",[t._v("RlpTypeMismatch")]),t._v(" in case\nof type mismatch with the stream contents under the cursor. A corrupted\nRLP stream or an attempt to read past the stream end will be signaled\nwith the "),s("code",[t._v("MalformedRlpError")]),t._v(" exception. If the RLP stream includes data\nthat cannot be processed on the current platform (e.g. an integer value\nthat is too large), the library will raise an "),s("code",[t._v("UnsupportedRlpError")]),t._v(" exception.")]),t._v(" "),s("h3",{attrs:{id:"dom-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dom-api"}},[t._v("#")]),t._v(" DOM API")]),t._v(" "),s("p",[t._v("Calling "),s("code",[t._v("Rlp.toNodes")]),t._v(" at any position within the stream will return a tree\nof "),s("code",[t._v("RlpNode")]),t._v(" objects representing the collection of values starting at that\nposition:")]),t._v(" "),s("div",{staticClass:"language-nim line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-nim"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v("\n  RlpNodeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v("\n    rlpBlob\n    rlpList\n\n  RlpNode"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" kind"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*:")]),t._v(" RlpNodeType\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("of")]),t._v(" rlpBlob"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      bytes"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*:")]),t._v(" seq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("byte"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("of")]),t._v(" rlpList"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      elems"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*:")]),t._v(" seq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("RlpNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("As a short-cut, you can also call "),s("code",[t._v("decode")]),t._v(" directly on a byte sequence to\navoid creating a "),s("code",[t._v("Rlp")]),t._v(" object when obtaining the nodes.\nFor debugging purposes, you can also create a human readable representation\nof the Rlp nodes by calling the "),s("code",[t._v("inspect")]),t._v(" proc:")]),t._v(" "),s("div",{staticClass:"language-nim line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-nim"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proc")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("inspect"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Rlp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" indent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"creating-rlp-data"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-rlp-data"}},[t._v("#")]),t._v(" Creating RLP data")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("RlpWriter")]),t._v(" type can be used to encode RLP data. Instances are created\nwith the "),s("code",[t._v("initRlpWriter")]),t._v(" proc. This should be followed by one or more calls\nto "),s("code",[t._v("append")]),t._v(" which is overloaded to accept arbitrary values. Finally, you can\ncall "),s("code",[t._v("finish")]),t._v(" to obtain the final "),s("code",[t._v("seq[byte]")]),t._v(".")]),t._v(" "),s("p",[t._v("If the end result should be a RLP list of particular length, you can replace\nthe initial call to "),s("code",[t._v("initRlpWriter")]),t._v(" with "),s("code",[t._v("initRlpList(n)")]),t._v(". Calling "),s("code",[t._v("finish")]),t._v("\nbefore writing the sufficient number of elements will then result in an assertion failure.")]),t._v(" "),s("p",[t._v("As an alternative short-cut, you can also call "),s("code",[t._v("encode")]),t._v(" on an arbitrary value\n(including sequences and user-defined types) to execute all of the steps at\nonce and directly obtain the final RLP bytes. "),s("code",[t._v("encodeList(varargs)")]),t._v(" is another\nshort-cut for creating RLP lists.")]),t._v(" "),s("h3",{attrs:{id:"object-serialization"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-serialization"}},[t._v("#")]),t._v(" Object serialization")]),t._v(" "),s("p",[t._v("As previously explained, generic procs such as "),s("code",[t._v("read")]),t._v(", "),s("code",[t._v("append")]),t._v(", "),s("code",[t._v("encode")]),t._v(" and\n"),s("code",[t._v("decode")]),t._v(" can be used with arbitrary used-defined object types. By default, the\nlibrary will serialize all of the fields of the object using the "),s("code",[t._v("fields")]),t._v("\niterator, but you can also include only a subset of the fields or modify the\norder of serialization or by employing the "),s("code",[t._v("rlpIgnore")]),t._v(" pragma or by using the\n"),s("code",[t._v("rlpFields")]),t._v(" macro:")]),t._v(" "),s("div",{staticClass:"language-nim line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-nim"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("macro")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rlpFields"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" typedesc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fields"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" varargs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("untyped"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## example usage:")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v("\n  Transaction "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")]),t._v("\n    amount"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" int\n    time"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" DateTime\n    sender"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n    receiver"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string\n\nrlpFields Transaction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  sender"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" receiver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" amount\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" t1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rlp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Transaction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bytes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("encode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" t2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bytes"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("decode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Transaction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br")])]),s("p",[t._v("In rare circumstances, you may need to serialize the same field type\ndifferently depending on the enclosing object type. You can use the\n"),s("code",[t._v("rlpCustomSerialization")]),t._v(" pragma to achieve this.")]),t._v(" "),s("h3",{attrs:{id:"optional-fields"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#optional-fields"}},[t._v("#")]),t._v(" Optional fields")]),t._v(" "),s("p",[t._v("Both "),s("code",[t._v("Option[T]")]),t._v(" of "),s("code",[t._v("std/options")]),t._v(" and "),s("code",[t._v("Opt[T]")]),t._v(" of "),s("code",[t._v("stew/results")]),t._v(" are supported.\nBut the decoder and encoder assume optional fields are always added at the end of the RLP object.\nYou can never set a field to "),s("code",[t._v("None")]),t._v(" unless all following fields are also "),s("code",[t._v("None")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-nim line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-nim"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Example")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v("\n  RlpObject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")]),t._v("\n    size"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" int\n    color"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Option"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    width"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Opt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("If "),s("code",[t._v("color")]),t._v(" is "),s("code",[t._v("none")]),t._v(", "),s("code",[t._v("width")]),t._v(" should also "),s("code",[t._v("none")]),t._v(". If "),s("code",[t._v("color")]),t._v(" is "),s("code",[t._v("some")]),t._v(", "),s("code",[t._v("width")]),t._v(" can be both.\nIf "),s("code",[t._v("color")]),t._v(" is "),s("code",[t._v("none")]),t._v(", but "),s("code",[t._v("width")]),t._v(" is some, it will raise assertion error.")]),t._v(" "),s("h3",{attrs:{id:"contributing-testing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contributing-testing"}},[t._v("#")]),t._v(" Contributing / Testing")]),t._v(" "),s("p",[t._v("To test the correctness of any modifications to the library, please execute\n"),s("code",[t._v("nimble test_rlp")]),t._v(" at the root of the repo.")]),t._v(" "),s("h2",{attrs:{id:"keys"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#keys"}},[t._v("#")]),t._v(" keys")]),t._v(" "),s("p",[t._v("This library is a Nim re-implementation of "),s("a",{attrs:{href:"https://github.com/ethereum/eth-keys",target:"_blank",rel:"noopener noreferrer"}},[t._v("eth-keys"),s("OutboundLink")],1),t._v(": the common API for working with Ethereum's public and private keys, signatures, and addresses.")]),t._v(" "),s("p",[t._v("By default, Nim eth-keys uses Bitcoin's "),s("a",{attrs:{href:"https://github.com/bitcoin-core/secp256k1",target:"_blank",rel:"noopener noreferrer"}},[t._v("libsecp256k1"),s("OutboundLink")],1),t._v(" as a backend. Make sure libsecp256k1 is available on your system.")]),t._v(" "),s("p",[t._v("An experimental pure Nim backend (Warning ⚠: do not use in production) is available with the compilation switch "),s("code",[t._v("-d:backend_native")])]),t._v(" "),s("h2",{attrs:{id:"keyfile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#keyfile"}},[t._v("#")]),t._v(" keyfile")]),t._v(" "),s("h3",{attrs:{id:"introduction-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#introduction-2"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),s("p",[t._v("This library is a Nim reimplementation of "),s("a",{attrs:{href:"https://github.com/ethereum/eth-keyfile",target:"_blank",rel:"noopener noreferrer"}},[t._v("ethereum/eth-keyfile"),s("OutboundLink")],1),t._v(", which is used to create and load Ethereum "),s("code",[t._v("keyfile")]),t._v(" format and the tools for handling the format and for storing private keys. Currently, the library supports only the PBKDF2 method and does not support the Scrypt method.")]),t._v(" "),s("h2",{attrs:{id:"trie"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trie"}},[t._v("#")]),t._v(" trie")]),t._v(" "),s("h2",{attrs:{id:"nim-implementation-of-the-ethereum-trie-structure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nim-implementation-of-the-ethereum-trie-structure"}},[t._v("#")]),t._v(" Nim Implementation of the Ethereum Trie structure")]),t._v(" "),s("h3",{attrs:{id:"hexary-trie"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hexary-trie"}},[t._v("#")]),t._v(" Hexary Trie")]),t._v(" "),s("h2",{attrs:{id:"bloom-an-ethereum-bloom-filter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bloom-an-ethereum-bloom-filter"}},[t._v("#")]),t._v(" bloom: an Ethereum Bloom Filter")]),t._v(" "),s("h2",{attrs:{id:"introduction-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#introduction-3"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),s("p",[t._v("A Nim implementation of the bloom filter used by Ethereum.")]),t._v(" "),s("h2",{attrs:{id:"description"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Bloom_filter",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bloom filters"),s("OutboundLink")],1),t._v(" are data structures that use hash functions to test whether an element is a member of a set. They work like other data structures but are probabilistic in nature: that is, they allow false positive matches but not false negative. Bloom filters use less storage space than other data structures.")]),t._v(" "),s("p",[t._v("Ethereum bloom filters are implemented with the Keccak-256 cryptographic hash function.")]),t._v(" "),s("p",[t._v("To see the bloom filter used in the context of Ethereum, please refer to the "),s("a",{attrs:{href:"https://ethereum.github.io/yellowpaper/paper.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ethereum Yellow Paper"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),s("div",{staticClass:"language-nim line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-nim"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" eth"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("bloom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stint\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" BloomFilter\nf"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("incl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doAssert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test1"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doAssert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test2"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("notin")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nf"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("incl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doAssert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test2"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doAssert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("toHex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._vs("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("h2",{attrs:{id:"node-discovery-protocol-v5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-discovery-protocol-v5"}},[t._v("#")]),t._v(" Node Discovery Protocol v5")]),t._v(" "),s("h3",{attrs:{id:"introduction-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#introduction-4"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("eth/p2p/discoveryv5")]),t._v(" directory holds a Nim implementation of the\n"),s("a",{attrs:{href:"https://github.com/ethereum/devp2p/blob/master/discv5/discv5.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node Discovery Protocol v5.1"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("The implemented specification is Protocol version v5.1.")]),t._v(" "),s("p",[t._v('This implementation does not support "Topic Advertisement" yet as this part of\nthe specification is not complete.')]),t._v(" "),s("p",[t._v("The implementation depends on other modules in the "),s("code",[t._v("eth")]),t._v(" package, namely: "),s("code",[t._v("keys")]),t._v("\nand "),s("code",[t._v("rlp")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"how-to-use"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#how-to-use"}},[t._v("#")]),t._v(" How to use")]),t._v(" "),s("div",{staticClass:"language-Nim line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-nim"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v("\n  rng "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" keys"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("newRng\n  privKey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PrivateKey"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rng"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tcpPort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" udpPort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setupNat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Or fill in external IP/ports manually")]),t._v("\n  d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newProtocol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("privKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tcpPort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" udpPort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rng "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rng"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nd"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start listening")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("This will initialize the "),s("code",[t._v("Protocol")]),t._v(" and start listening. However, as no\nbootstrap nodes were passed in the "),s("code",[t._v("newProtocol")]),t._v(' call, the created ENR will need\nto be advertised somehow ("out of band"), so that the node can become known to\nother nodes in the network.')]),t._v(" "),s("p",[t._v("To initialize with a bootnode or a set of bootnodes, the ENRs need to be passed\nas parameter in "),s("code",[t._v("newProtocol")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-Nim line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-nim"}},[s("code",[t._v("d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newProtocol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("privKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tcpPort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" udpPort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      bootstrapRecords "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bootnodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nd"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start listening and add bootstrap nodes to the routing table.")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("Next there are two ways to run the protocol.")]),t._v(" "),s("p",[t._v("One can call "),s("code",[t._v("d.start()")]),t._v(" and two loops will be started:")]),t._v(" "),s("ol",[s("li",[t._v("Refresh loop")]),t._v(" "),s("li",[t._v("Revalidation loop")])]),t._v(" "),s("p",[t._v("The first loop will at specific interval do a query with a random "),s("code",[t._v("NodeId")]),t._v(" if no\nmanual queries were done for more than that interval period.\nThis query will add discovered nodes to the routing table.\nThe second loop will at random ranged interval send a ping to the least recently\nseen node in a random bucket. This is to keep the routing table cleared of\nunreachable/dead nodes.")]),t._v(" "),s("p",[t._v("Now within the application, manual queries or lookups can be done, for which\nthe discovered nodes can be used. Nodes discovered during this process will be\nattempted to be added to the routing table. One can use the "),s("code",[t._v("query")]),t._v(", "),s("code",[t._v("queryRandom")]),t._v("\nor "),s("code",[t._v("lookup")]),t._v(" calls for this. "),s("code",[t._v("randomNodes")]),t._v(" can also be used to find nodes,\nbut this will only look into the current routing table and not actively\nsearch for nodes on the network.")]),t._v(" "),s("p",[t._v("Or, one can decide not to run "),s("code",[t._v("d.start()")]),t._v(" and do this manually within its\napplication by using the available calls:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("query")]),t._v(", "),s("code",[t._v("queryRandom")]),t._v(" or "),s("code",[t._v("lookup")]),t._v(" for discovering more peers.")]),t._v(" "),s("li",[s("code",[t._v("revalidateNode")]),t._v(" or directly "),s("code",[t._v("ping")]),t._v(" for revalidating nodes.")])]),t._v(" "),s("p",[t._v("Of course, in either scenario, lookups can still be done for actually finding a\nspecific node. There is a "),s("code",[t._v("resolve")]),t._v(" call that can help with this, it will first\nlook in the local routing table and if it finds the node it will try to contact\nthe node directly to check if the ENR is up to date. If any of this fail a\n"),s("code",[t._v("lookup")]),t._v(" will be done.")]),t._v(" "),s("h3",{attrs:{id:"test-suite"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test-suite"}},[t._v("#")]),t._v(" Test suite")]),t._v(" "),s("p",[t._v("To run the test suite specifically for discovery v5 related (discovery v5 + its\nnim-eth dependencies) tests, one can run following command:")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Install required modules")]),t._v("\nnimble "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Run only discovery v5 related test suite")]),t._v("\nnimble test_discv5_full\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"dcli"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dcli"}},[t._v("#")]),t._v(" dcli")]),t._v(" "),s("p",[t._v("This is a small command line application that allows you to run a discovery\nnode. It also has the options to do a "),s("code",[t._v("ping")]),t._v(" or "),s("code",[t._v("findNode")]),t._v(" request to a specific\nnode, by providing its ENR.")]),t._v(" "),s("h4",{attrs:{id:"example-usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example-usage"}},[t._v("#")]),t._v(" Example usage")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Install required modules")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Make sure you have the latest modules, do NOT trust nimble on this.")]),t._v("\nnimble "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Build dcli")]),t._v("\nnim c -d:chronicles_log_level:trace -d:release --threads:on ./tools/dcli\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## See all options")]),t._v("\n./tools/dcli --help\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Ping another node")]),t._v("\n./tools/dcli "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ping")]),t._v(" enr:"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("base64 encoding of ENR"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Run discovery node")]),t._v("\n./tools/dcli --log-level:debug --bootnode:enr:"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("base64 encoding of ENR"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("h4",{attrs:{id:"metrics"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#metrics"}},[t._v("#")]),t._v(" Metrics")]),t._v(" "),s("p",[t._v("To run dcli with metrics enabled provide the "),s("code",[t._v("metrics")]),t._v(" flag:")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Run dcli with metrics")]),t._v("\n./tools/dcli --metrics --bootnode:enr:"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("base64 encoding of ENR"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("You can now see the metrics at http://localhost:8008/metrics. Or use e.g.\nPrometheus to grab the data.")]),t._v(" "),s("h2",{attrs:{id:"prerequisites"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[t._v("#")]),t._v(" Prerequisites")]),t._v(" "),s("ul",[s("li",[t._v("Nim & Nimble")])]),t._v(" "),s("h2",{attrs:{id:"building-testing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#building-testing"}},[t._v("#")]),t._v(" Building & Testing")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# Install required modules\nnimble install\n# Run full test suite\nnimble test\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("You can also run specific parts of the test suite, e.g.:")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# Test p2p functionality\nnimble test_p2p\n# Test rlp functionality\nnimble test_rlp\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h2",{attrs:{id:"fuzzing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fuzzing"}},[t._v("#")]),t._v(" Fuzzing")]),t._v(" "),s("p",[t._v("Next to the test suite, there are also several fuzzing test cases available.\nHow these can be run is explained in the "),s("a",{attrs:{href:"https://github.com/status-im/nim-eth/blob/master/tests/fuzzing/readme.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("fuzzing readme"),s("OutboundLink")],1),t._v(".")])])}),[],!1,null,null,null);e.default=n.exports}}]);