(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{368:function(t,s,e){"use strict";e.r(s);var a=e(44),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"stew"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stew"}},[t._v("#")]),t._v(" Stew")]),t._v(" "),e("h1",{attrs:{id:"stew-status-e-something-w-something"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stew-status-e-something-w-something"}},[t._v("#")]),t._v(" stew - status e-something w-something")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://opensource.org/licenses/Apache-2.0",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://img.shields.io/badge/License-Apache%202.0-blue.svg",alt:"License: Apache"}}),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://opensource.org/licenses/MIT",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://img.shields.io/badge/License-MIT-blue.svg",alt:"License: MIT"}}),e("OutboundLink")],1),t._v(" "),e("img",{attrs:{src:"https://img.shields.io/badge/stability-experimental-orange.svg",alt:"Stability: experimental"}}),t._v(" "),e("img",{attrs:{src:"https://github.com/status-im/nim-stew/workflows/CI/badge.svg",alt:"Github action"}})]),t._v(" "),e("p",[e("code",[t._v("stew")]),t._v(" is collection of utilities, std library extensions and budding libraries\nthat are frequently used at Status, but are too small to deserve their own\ngit repository.")]),t._v(" "),e("p",[t._v("We also use "),e("code",[t._v("stew")]),t._v(" as a staging ground for code that has yet to be\nbattle-tested.")]),t._v(" "),e("p",[t._v("Some of these libraries may eventually be proposed for inclusion in Nim or\nbroken out into separate repositories.")]),t._v(" "),e("h2",{attrs:{id:"notable-libraries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#notable-libraries"}},[t._v("#")]),t._v(" Notable libraries")]),t._v(" "),e("p",[t._v("Libraries are documented either in-module or on a separate README in their\nrespective folders")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("arrayops")]),t._v(" - small helpers and operations on "),e("code",[t._v("array")]),t._v("/"),e("code",[t._v("openArray")])]),t._v(" "),e("li",[e("code",[t._v("assign2")]),t._v(" - fast assignments (unlike the "),e("code",[t._v("=")]),t._v(" operator in nim which is very slow)")]),t._v(" "),e("li",[e("code",[t._v("bitops2")]),t._v(" - an updated version of "),e("code",[t._v("bitops.nim")]),t._v(", filling in gaps in original code")]),t._v(" "),e("li",[e("code",[t._v("byteutils")]),t._v(" - utilities that make working with the Nim "),e("code",[t._v("byte")]),t._v(" type convenient")]),t._v(" "),e("li",[e("code",[t._v("endians2")]),t._v(" - utilities for converting to and from little / big endian integers")]),t._v(" "),e("li",[e("code",[t._v("leb128")]),t._v(" - utilities for working with LEB128-based formats (such as the varint style found in protobuf)")]),t._v(" "),e("li",[e("code",[t._v("objects")]),t._v(" - get an object's base type at runtime, as a string")]),t._v(" "),e("li",[e("code",[t._v("ptrops")]),t._v(" - pointer arithmetic utilities")]),t._v(" "),e("li",[e("code",[t._v("result")]),t._v(" - moved to "),e("a",{attrs:{href:"https://github.com/arnetheduck/nim-results/",target:"_blank",rel:"noopener noreferrer"}},[t._v("nim-results"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("code",[t._v("shims")]),t._v(" - backports of nim "),e("code",[t._v("devel")]),t._v(" code to the stable version that Status is using")]),t._v(" "),e("li",[e("code",[t._v("sequtils2")]),t._v(" - extensions to the "),e("code",[t._v("sequtils")]),t._v(" module for working conveniently with "),e("code",[t._v("seq")])])]),t._v(" "),e("h2",{attrs:{id:"layout"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#layout"}},[t._v("#")]),t._v(" Layout")]),t._v(" "),e("p",[e("code",[t._v("stew")]),t._v(" modules are made to be fairly independent of each other, but generally\nfollow the following layout - if you've used C++'s "),e("code",[t._v("boost")]),t._v(", you'll feel right at\nhome:")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Single-module libraries")]),t._v("\nstew/small.nim "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# small libraries that fits in one module")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Multi-module libraries")]),t._v("\nstew/libname.nim "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Main import file")]),t._v("\nstew/libname/stuff.nim "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Detail import file")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Nim standard library shims that contain forwards-compatibility code to manage")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# support for multiple nim versions - code in here typically has been taken")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# from nim `devel` branch and `name` will reexport the corresponding std lib")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# module")]),t._v("\nstew/shims/macros.nim "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# module that reexports `macros.nim` adding code from newer nim versions")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Tests are in the tests folder (duh!)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# To execute, run either `all_tests.nim` or specific `test_xxx.nim` files:")]),t._v("\nnim c -r tests/all_tests\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br")])]),e("h2",{attrs:{id:"compatibility"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#compatibility"}},[t._v("#")]),t._v(" Compatibility")]),t._v(" "),e("p",[t._v("One of the goals of "),e("code",[t._v("stew")]),t._v(" is to provide backwards and forwards compatibility\nfor different Nim versions, such that code using "),e("code",[t._v("stew")]),t._v(" works well with multiple\nversions of Nim. If "),e("code",[t._v("stew")]),t._v(" is not working with the Nim version you're using, we\nwelcome patches.")]),t._v(" "),e("p",[t._v("You can create multiple versions of your code using the following pattern:")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NimMajor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("NimMinor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("NimPatch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("discard")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NimMajor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("NimMinor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("NimPatch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("discard")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{.")]),t._v("fatal"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsupported nim version"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("h2",{attrs:{id:"using-stew-in-your-project"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#using-stew-in-your-project"}},[t._v("#")]),t._v(" Using stew in your project")]),t._v(" "),e("p",[t._v("We do not recommend using this library as a normal "),e("code",[t._v("nimble")]),t._v(" dependency - there\nare no versioned releases and we will not maintain API/ABI stability. Instead,\nmake sure you pin your dependency to a specific git hash (for example using a\nsubmodule) or copy the file to your project instead.")]),t._v(" "),e("p",[t._v("Typically, you will import either a top-level library or drill down into its\nsubmodules:")]),t._v(" "),e("div",{staticClass:"language-nim line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nim"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" stew"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("bitops2\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" stew"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("ranges"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("bitranges\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("⚠️ No API/ABI stability - pick a commit and stick with it ⚠️")])])}),[],!1,null,null,null);s.default=n.exports}}]);